/* Includes ------------------------------------------------------------------*/
//#include <math.h>
#include "stm32f0xx.h"
#include "Global.h"
#include "TimeEvent.h"
#include "UartTask.h"
#include "Variable.h"
#include "bsp_periph.h"

/*********************************************************************
 * MACROS
 */
/*********************************************************************
 * TYPEDEFS
 */

/*********************************************************************
 * CONSTANTS
 */

/*********************************************************************
 * GLOBAL VARIABLES
 */
 
/*********************************************************************
 * EXTERNAL VARIABLES
 */

/*********************************************************************
 * EXTERNAL FUNCTIONS
 */
 
/*********************************************************************
 * LOCAL VARIABLES
 */

scaleDataList_t ScaleDataList;
uint8_t Channel = 0;
uint8_t RevDatalen = 0;
uint8_t rxBUF[BufSize], txBUF[BufSize] ;
uint8_t deviceId = 0;
//uint8_t sn = 0;
	
/***************************************************************************************************
 * @fn      _Bool ScaleData_CheckListHead(void)
 *
 * @brief   检查发送链表头是否为空
 *
 * @param   NULL
 *
 * @return  0-空	1-不为空
 ***************************************************************************************************/
_Bool ScaleData_CheckListHead( void )
{
	if( ScaleDataList.head == NULL )
			return 0;
	else
			return 1;
}

/***************************************************************************************************
 * @fn      uint8_t *ScaleData_GetListHeadBuf(void)
 *
 * @brief   获取链表里需要发送的数据指针
 *
 * @param   NULL
 *
 * @return  获取链表里需要发送的数据指针
 ***************************************************************************************************/
uint8_t *ScaleData_GetListHeadBuf(void)
{
  return ScaleDataList.head->buf;
}

/***************************************************************************************************
 * @fn      uint16_t NET_DEVICE_GetListHeadLen( void )
 *
 * @brief   获取链表里需要发送的数据长度
 *
 * @param   NULL
 *
 * @return  获取链表里需要发送的数据长度
 ***************************************************************************************************/
uint16_t ScaleData_GetListHeadLen( void )
{
    return ScaleDataList.head->bufLen;
}
/***************************************************************************************************
 * @fn      uint8_t NET_DEVICE_AddDataSendList( uint8_t *buf , uint16_t dataLen )
 *
 * @brief   在发送链表尾新增一个发送链表
 *
 * @param   connId:链接号  buf：需要发送的数据 dataLen：数据长度
 *
 * @return  0-成功	其他-失败
 ***************************************************************************************************/
uint8_t ScaleData_AddDataSendList( uint8_t *buf , uint16_t dataLen )
{
   uartMsgList_t *current = NULL;
	
	 current = (uartMsgList_t *)malloc(sizeof(uartMsgList_t));//分配内存
	
   if( current == NULL )
	 {
		 free(buf); 
		 return 1;
   }
     
	 
   if( ScaleDataList.head == NULL )							//如果head为NULL
	 { 
     ScaleDataList.head = current;							//head指向当前分配的内存区
	 }
   else										//如果head不为NULL
     ScaleDataList.end->next = current;				//则end指向当前分配的内存区

		current->buf = buf;//复制数据
    current->bufLen = dataLen;
    current->next = NULL;								//下一段为NULL
	 
    current->reSendCount = 1;
	  current->flag = 0;//0：回复帧   1：主动上发帧
	 
    ScaleDataList.end = current;        //end指向当前分配的内存区
	 
    return 0;
}

/***************************************************************************************************
 * @fn      _Bool NET_DEVICE_DeleteDataSendList(void)
 *
 * @brief   从链表头删除一个链表
 *
 * @param   NULL
 *
 * @return  NULL
 ***************************************************************************************************/
_Bool ScaleData_DeleteDataSendList(void)
{
    uartMsgList_t  *pNewhead = ScaleDataList.head->next;	//保存链表头的下一段数据地址
	
    ScaleDataList.head->bufLen = 0;
	  ScaleDataList.head->reSendCount = 0;
	  ScaleDataList.head->flag = 0;
    ScaleDataList.head->next = NULL;
    free(ScaleDataList.head->buf);			//释放内存
    free(ScaleDataList.head);				    //释放内存
    ScaleDataList.head = pNewhead;			//链表头指向下一段数据
    return 0;
}

/***************************************************************************************************
 * @fn      _Bool ScaleData_DeleteAllDataList(void)
 *
 * @brief   从链表头删除整个链表
 *
 * @param   NULL
 *
 * @return  NULL
 ***************************************************************************************************/
_Bool ScaleData_DeleteAllDataList(void)
{
	 uartMsgList_t *phead = ScaleDataList.head->next;//保存链表头的下一段数据地址

	 while( ScaleDataList.head != NULL )
	 {
		 ScaleDataList.head->bufLen = 0;
		 ScaleDataList.head->reSendCount = 0;
		 ScaleDataList.head->flag = 0;
		 ScaleDataList.head->next = NULL;
		 free(ScaleDataList.head->buf);			  //释放内存
		 free(ScaleDataList.head);				    //释放内存
		 
		 ScaleDataList.head = phead;					//链表头指向下一段数据
		 phead = phead->next;
	 }
	 
	 return 0;
}


/*********************************************************************
 * @fn   uint8_t ScaleData_GetNumInList( uartMsgList_t *head )
 *
 * @brief 统计该列表的元素个数
 *          
 * @param            
 *
 * @return  none
 */

uint16_t ScaleData_GetNumInList( uartMsgList_t *head )
{    
	 uartMsgList_t *q = head;
   uint16_t num = 0;

		while(q->next != NULL)
		{
			q = q->next;
			num++;
		}
		
		return num;
}

/*********************************************************************
 * @fn      void UartScalesData_Handle( void )
 *
 * @brief   接收秤盘数据处理
 *          
 * @param            
 *
 * @return  none

		+23455\r\n
		-   10\r\n
		+  120\r\n
*/

void UartScalesData_Handle( void )
{
	uint8_t *ptr = NULL;
	uint8_t *pBuf = NULL, pBuflen=0;
	uint8_t  CompleteFlag = 0;
	char *start = NULL,*end = NULL,*ptr_str =NULL;
	
	for(Channel=0; Channel<5;Channel++)
	{
		if( isrCfg[Channel].rxTimeOut == 1 )
	  {
		  isrCfg[Channel].rxTimeOut = 0;
			RevDatalen = HalUARTRxAvailISR( Channel );
		  if( RevDatalen )//存在数据
		  {
				ptr = (uint8_t *)&rxBUF;
				start = (char *)&rxBUF;
				HalUARTReadISR(rxBUF, RevDatalen,Channel);
				
				while( RevDatalen >= 12 )
				{
					if( *ptr == 0x5A )//头数据正确
					{
						if( Sum_CalcFCS(ptr, 11) == *(ptr+11) )//和校验成功
						{
							/**************数据打包,测试**************/
							Uart_ScaleBuildAndSendMsg( Channel, ptr, 12);
							//CompleteFlag = 1;
							RevDatalen -= 12;
							ptr = ptr+12;
//							break;
						}
						else
						{
							//CompleteFlag = 0; 
							ptr++;
							RevDatalen--;	
						}
					}
					else
					{
						 //CompleteFlag = 0; 
						 ptr++;
						 RevDatalen--;
					}
				}
				
				if( CompleteFlag == 0 )
				{		
					start = strchr(start,'@');
					end = strchr(start,'#');
					if(start != NULL && end != NULL)//秤盘回复的数据
					{						
//						if(strstr(start,"RID") == NULL)
//						{
						  ptr_str = strchr(start, ',');
							*(ptr_str+1) = 0x30+Channel;//修改层号	
							pBuflen = end - start+1;
							/**************数据打包**************/
							pBuf = (uint8_t *)malloc( pBuflen );
							if( pBuf )
							{
								memcpy(pBuf, (uint8_t *)start, pBuflen );
								ScaleData_AddDataSendList( pBuf,pBuflen );
								HalLedBlink(HAL_LED[Channel], 1, 30, 90);
							}						
//						}
//						else
//						{
//						}
					}
				}
				CompleteFlag = 0;
				memset(rxBUF, 0x00, BufSize);
		  }
	  }
	}
}



/*********************************************************************
 * @fn     void UartDataHandle(void)
 *
 * @brief  收到主控板命令数据处理
 *          
 * @param   none        
 *
 * @return  none
 */
void UartMainDataHandle( void )
{
#ifdef DMA_TR
  uint8_t buflen = 0;
	char  *ptr = NULL;
	char  *start = NULL,*end = NULL;

	if( Uart5Handle.RxXferCount == 0xFFFF )//数据接收
	{
		Uart5Handle.RxXferCount = 0;
		start = strchr((char *)Uart5Handle.pRxBuffPtr,'@');
		ptr = start;
		end = strchr((char *)Uart5Handle.pRxBuffPtr,'#');
		
		if( ptr != NULL && end != NULL )
		{
			ptr = strchr(ptr, ',');
			deviceId = strtoul( ptr+1, NULL, 10);
			if( deviceId <= 4 )
			{
				*(ptr+1) = '0';//修改层号
				buflen = end - start+1;
				HAL_UART_Transmit(&UartHandle[deviceId], (uint8_t *)start, buflen, 0xFFFFFFFFU);
				
        memset(Uart5Handle.pRxBuffPtr, 0x00, Uart5Handle.RxXferSize );
			  return;	
			}
		}
		memset(Uart5Handle.pRxBuffPtr, 0x00, Uart5Handle.RxXferSize );
	  HAL_UART_Receive_DMA(&Uart5Handle, Uart5Handle.pRxBuffPtr,  Uart5Handle.RxXferSize);
	 }
#else
	uint8_t buflen=0;
	char *start = NULL,*end = NULL,*ptr =NULL;
	
	if( isrCfg[5].rxTimeOut == 1 )
	{
		isrCfg[5].rxTimeOut = 0;
		RevDatalen = HalUARTRxAvailISR( 5 );
		if( RevDatalen )//存在数据
		{
			HalUARTReadISR(UartPort.rxBuf, RevDatalen, 5);
			start = strchr((char *)UartPort.rxBuf,'@');
			ptr = start;
			end = strchr(start,'#');
			
			if( ptr != NULL && end != NULL )
			{
				ptr = strchr(ptr, ',');
				deviceId = strtoul( ptr+1, NULL, 10);
				if( deviceId <= 4 )
				{
					*(ptr+1) = '0';//修改层号
					buflen = end - start+1;
					HAL_UART_Transmit(&UartHandle[deviceId], (uint8_t *)start, buflen, 0xFFFFFFFFU);
					
					memset(UartPort.rxBuf, 0x00, BufSize );
					HalLedBlink(HAL_LED_6, 1, 20, 20);
					HalLedBlink(HAL_LED[deviceId], 1, 30, 90);
					return;	
				}
			}
			memset(UartPort.rxBuf, 0x00, BufSize );	
		}
	}
#endif
}


/***************************************************************************************************
 * @fn      void Uart_BuildAndSendMsgToZigbee( uint8 Addr, uint8 Cmd, uint8 *pData, uint16 dataLen, uint8 SeqNum )
 *
 * @brief   Build and send a Gw msg
 * @param   uint8 Cmd - command ID
 *          uint16 SrcAddr - SrcAddr
 *          byte dataLen
 *          byte *pData
 *
 * @return  void
 ***************************************************************************************************/
void Uart_ScaleBuildAndSendMsg( uint8_t MouID, uint8_t *pData, uint8_t msglen)//msglen=12
{
  uint8_t *msg_ptr = NULL;

  /**************数据打包**************/
	msg_ptr = (uint8_t *)malloc( msglen);
	if( msg_ptr )
	{
//		*(pData+1) = (*(pData+1)&0xF0)|MouID;//地址加入
//		*(pData+msglen-1) = Sum_CalcFCS(pData, (msglen-1) );//配置校验和
		
		*(pData+1) = *(pData+1)+MouID;//地址加入
		*(pData+msglen-1) = *(pData+msglen-1)+MouID;//配置校验和
		
		memcpy(msg_ptr, pData, msglen );
		ScaleData_AddDataSendList( msg_ptr,msglen);
		HalLedBlink(HAL_LED[Channel], 1, 30, 90);
	}
//	else
//	{
//		HalLedBlink(HAL_LED[Channel], 1, 30, 90);
//	}
}
/*********************************************************************
 * @fn      void ReadScalesDataQueue_Evt( void )
 *
 * @brief   串口数据队列读取,发送
 *          
 * @param   none          
 *
 * @return  none
 */
void ReadScalesDataQueue_Evt( void )
{
	uartMsgList_t *pItem = ScaleDataList.head;
	
	timer_10msDB[ReadScalesDataQueueTask].Flag = 0;
  timer_10msDB[ReadScalesDataQueueTask].Enable = ENABLE;
  timer_10msDB[ReadScalesDataQueueTask].Time = 10;
		
	if( pItem != NULL )//消息缓冲不为空,接收完成标志
	{
		if( pItem->reSendCount == 0 )
		{
			ScaleData_DeleteDataSendList();
			pItem = ScaleDataList.head;
		}
		else
		{
			pItem->reSendCount--;
		}
		
#ifdef DMA_TR
	    HAL_UART_Transmit_DMA(&Uart5Handle, pItem->buf,  pItem->bufLen); 
#else		
		  HAL_UART_Transmit(&UartHandle[5], pItem->buf,  pItem->bufLen,0xFFFFFFFFU);
		  ScaleData_DeleteDataSendList();
#endif
		HalLedBlink(HAL_LED_6, 1, 20, 20);
	}
}


/**
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle. 
  * @note   This example shows a simple way to report end of DMA Tx transfer, and 
  *         you can add your own implementation. 
  * @retval None
  */

#ifdef DMA_TX
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  // uartMsgList_t *pItem = ScaleDataList.head;
	 ScaleData_DeleteDataSendList();
	 Timer_Event_Set( &timer_10msDB[ReadScalesDataQueueTask],  10, ENABLE, 0, ReadScalesDataQueue_Evt);//关闭状态包
}

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
   
	 //ScaleData_DeleteDataSendList();
}
#endif

/***************************************************************************************************
 * @fn      SPIMgr_CalcFCS
 *
 * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
 *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
 *
 * @param   byte *msg_ptr - message pointer
 * @param   byte len - length (in bytes) of message
 *
 * @return  result byte
 ***************************************************************************************************/
//uint8_t Xor_CalcFCS( uint8_t *msg_ptr, uint8_t len )
//{
//  uint8_t x;
//  uint8_t xorResult;

//  xorResult = 0;

//  for ( x = 0; x < len; x++, msg_ptr++ )
//    xorResult = xorResult ^ *msg_ptr;

//  return ( xorResult );
//}

/***************************************************************************************************
 * @fn      SPIMgr_CalcFCS
 *
 * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
 *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
 *
 * @param   byte *msg_ptr - message pointer
 * @param   byte len - length (in bytes) of message
 *
 * @return  result byte
 ***************************************************************************************************/
uint8_t Sum_CalcFCS( uint8_t *msg_ptr, uint8_t len )
{
	 uint32_t sum = 0;
	 uint8_t i, sumResult = 0;
	
	 for( i=0; i<len; i++ )
		 sum += msg_ptr[i];
	
   sumResult = (uint8_t )(sum&0x000000FF); 
	 
  return ( sumResult );
}
